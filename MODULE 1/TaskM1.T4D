#include <avr/io.h>
#include <avr/interrupt.h>

#define LED_PIN_1 5
#define LED_PIN_2 6
#define LED_PIN_3 7
#define PIR_SENSOR_PIN_1 2
#define PIR_SENSOR_PIN_2 3
#define SOIL_MOISTURE_PIN 4
#define TIMER_LED 8

const uint16_t timer = 0; // counter +
const uint16_t compare = 31250; // compare thresholds

void setup() {
  pinMode(LED_PIN_1, OUTPUT);
  pinMode(LED_PIN_2, OUTPUT);
  pinMode(LED_PIN_3, OUTPUT);
  pinMode(TIMER_LED, OUTPUT);

  digitalWrite(LED_PIN_1, LOW);
  digitalWrite(LED_PIN_2, LOW);
  digitalWrite(LED_PIN_3, LOW);

  // Enable Pin Change Interrupt for PIR sensors
  PCICR |= (1 << PCIE2); // B00000100
  PCMSK2 |= (1 << PCINT18) | (1 << PCINT19) | (1 << PCINT20);

  // Enable Timer Interrupt
  enableTimerInterrupt(0.5);

  // Initialize Serial communication
  Serial.begin(9600);
  Serial.println("Sensor Simulation Started");
}

void loop() {


  delay(1000);  // Add a delay to avoid overwhelming the Serial Monitor
}

void enableTimerInterrupt(double freq) {
  
  noInterrupts();
  
  uint16_t ocrValue = (uint16_t)(F_CPU / 1024 / freq - 1);
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 0;
  
  OCR1A = ocrValue;
  TCCR1B  |= (1 << WGM12);
  TCCR1B  |= (1 << CS12) | (1 << CS10);
  TIMSK1 |= (1 << OCIE1A);
  // Enable interrupts
  interrupts();
}

ISR(PCINT2_vect) {
  // Pin Change Interrupt logic here
  if (digitalRead(PIR_SENSOR_PIN_1) == HIGH) {
    // PIR sensor 1 triggered
    digitalWrite(LED_PIN_1, HIGH);  // Turn on LED 1
    Serial.println("PIR Sensor 1 Activated");
  } else {
    digitalWrite(LED_PIN_1, LOW);  // Turn off LED 1
  }

  if (digitalRead(PIR_SENSOR_PIN_2) == HIGH) {
    // PIR sensor 2 triggered
    digitalWrite(LED_PIN_2, HIGH);  // Turn on LED 2
    Serial.println("PIR Sensor 2 Activated");
  } else {
    digitalWrite(LED_PIN_2, LOW);  // Turn off LED 2
  }
   if (digitalRead(SOIL_MOISTURE_PIN) == HIGH) {
    // PIR sensor 2 triggered
    digitalWrite(LED_PIN_3, HIGH);  // Turn on LED 3
    Serial.println("Tilt Sensor 3 High");
  } else {
    digitalWrite(LED_PIN_3, LOW);  // Turn off LED 3
  }
  digitalWrite(LED_PIN_3, digitalRead(SOIL_MOISTURE_PIN));
}



ISR(TIMER1_COMPA_vect){
  digitalWrite(TIMER_LED, digitalRead(TIMER_LED) ^ 1);
}




