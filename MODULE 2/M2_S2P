#include <iostream>
#include <thread>
#include <chrono>
#include <vector>
#include <cstdlib>

void randomVector(int vector[], int size) {
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

void generateRandomValues(int vector[], int size, int start, int end) {
    for (int i = start; i < end; ++i) {
        vector[i] = rand() % 100;
    }
}

void addArrays(int result[], const int vector1[], const int vector2[], int size, int start, int end) {
    for (int i = start; i < end; ++i) {
        result[i] = vector1[i] + vector2[i];
    }
}

int main() {
    unsigned long size = 100000000;
    srand(time(0));
    int *v1, *v2, *v3;

    auto start = std::chrono::high_resolution_clock::now();

    v1 = new int[size];
    v2 = new int[size];
    v3 = new int[size];

    // Number of threads to use
    int num_threads = std::thread::hardware_concurrency();

    // Vector to hold threads
    std::vector<std::thread> threads;

    // Splitting the work among threads for random value generation
    for (int i = 0; i < num_threads; ++i) {
        int chunk_size = size / num_threads;
        int start_index = i * chunk_size;
        int end_index = (i == num_threads - 1) ? size : (i + 1) * chunk_size;
        threads.push_back(std::thread(generateRandomValues, v1, size, start_index, end_index));
    }

    // Wait for all threads to finish
    for (auto& t : threads) {
        t.join();
    }

    threads.clear();

    // Splitting the work among threads for array addition
    for (int i = 0; i < num_threads; ++i) {
        int chunk_size = size / num_threads;
        int start_index = i * chunk_size;
        int end_index = (i == num_threads - 1) ? size : (i + 1) * chunk_size;
        threads.push_back(std::thread(addArrays, v3, v1, v2, size, start_index, end_index));
    }

    // Wait for all threads to finish
    for (auto& t : threads) {
        t.join();
    }

    auto stop = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::microseconds>(stop - start);

    std::cout << "Time taken by function: " << duration.count() << " microseconds" << std::endl;

    delete[] v1;
    delete[] v2;
    delete[] v3;

    return 0;
}
